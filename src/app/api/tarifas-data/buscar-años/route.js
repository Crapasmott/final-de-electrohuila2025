// api/tarifas/buscar-a√±os/route.js
// BUSCAR TODOS LOS A√ëOS DE TARIFAS REALES (2008-2025)

import { NextResponse } from 'next/server';

const WP_BASE_URL = 'https://electrohuila.com.co';
const WP_API_URL = 'https://electrohuila.com.co/wp-json/wp/v2';

export async function GET() {
  try {
    console.log('üîç Buscando TODOS los a√±os de tarifas en WordPress (2008-2025)...');
    
    const a√±osEncontrados = new Set();
    const tarifasPorA√±o = {};
    const archivosEncontrados = [];

    // B√öSQUEDA EXHAUSTIVA: Obtener TODOS los archivos PDF
    let page = 1;
    let hayMasArchivos = true;
    
    while (hayMasArchivos && page <= 10) { // M√°ximo 10 p√°ginas para evitar bucle infinito
      console.log(`üì° Buscando p√°gina ${page} de archivos...`);
      
      try {
        const response = await fetch(
          `${WP_API_URL}/media?per_page=100&page=${page}&mime_type=application/pdf`,
          {
            headers: {
              'User-Agent': 'ElectroHuila-NextJS/1.0'
            }
          }
        );

        if (!response.ok) {
          if (response.status === 400) {
            console.log('üìÑ No hay m√°s p√°ginas de archivos');
            hayMasArchivos = false;
            break;
          }
          throw new Error(`HTTP ${response.status}`);
        }

        const archivos = await response.json();
        console.log(`üìÑ Encontrados ${archivos.length} archivos en p√°gina ${page}`);

        if (archivos.length === 0) {
          hayMasArchivos = false;
          break;
        }

        // Analizar cada archivo
        archivos.forEach(archivo => {
          const info = analizarArchivo(archivo);
          if (info && info.a√±o >= 2008 && info.a√±o <= 2025) {
            a√±osEncontrados.add(info.a√±o);
            archivosEncontrados.push(info);
            
            if (!tarifasPorA√±o[info.a√±o]) {
              tarifasPorA√±o[info.a√±o] = {};
            }
            if (!tarifasPorA√±o[info.a√±o][info.mes]) {
              tarifasPorA√±o[info.a√±o][info.mes] = [];
            }
            tarifasPorA√±o[info.a√±o][info.mes].push(info);
          }
        });

        page++;
        
      } catch (error) {
        console.error(`‚ùå Error en p√°gina ${page}:`, error.message);
        hayMasArchivos = false;
      }
    }

    // B√öSQUEDA ADICIONAL: Posts con tarifas
    console.log('üì° Buscando en posts...');
    try {
      const postsResponse = await fetch(
        `${WP_API_URL}/posts?per_page=100&search=tarifa OR esf OR estados OR financiero`,
        {
          headers: {
            'User-Agent': 'ElectroHuila-NextJS/1.0'
          }
        }
      );

      if (postsResponse.ok) {
        const posts = await postsResponse.json();
        console.log(`üìù Analizando ${posts.length} posts...`);
        
        posts.forEach(post => {
          const tarifasDelPost = extraerTarifasDePost(post);
          tarifasDelPost.forEach(tarifa => {
            if (tarifa.a√±o >= 2008 && tarifa.a√±o <= 2025) {
              a√±osEncontrados.add(tarifa.a√±o);
              archivosEncontrados.push(tarifa);
              
              if (!tarifasPorA√±o[tarifa.a√±o]) {
                tarifasPorA√±o[tarifa.a√±o] = {};
              }
              if (!tarifasPorA√±o[tarifa.a√±o][tarifa.mes]) {
                tarifasPorA√±o[tarifa.a√±o][tarifa.mes] = [];
              }
              tarifasPorA√±o[tarifa.a√±o][tarifa.mes].push(tarifa);
            }
          });
        });
      }
    } catch (error) {
      console.error('‚ùå Error buscando posts:', error);
    }

    // ORGANIZAR RESULTADOS
    const a√±osOrdenados = Array.from(a√±osEncontrados).sort((a, b) => b - a);
    
    console.log('‚úÖ B√∫squeda completada:', {
      a√±osEncontrados: a√±osOrdenados.length,
      archivosTotal: archivosEncontrados.length,
      a√±os: a√±osOrdenados
    });

    // ESTAD√çSTICAS DETALLADAS
    const estadisticasDetalladas = {
      rangoCompleto: {
        desde: Math.min(...a√±osEncontrados),
        hasta: Math.max(...a√±osEncontrados),
        total: a√±osEncontrados.size
      },
      porA√±o: {},
      resumenMeses: {}
    };

    a√±osOrdenados.forEach(a√±o => {
      const mesesDelA√±o = Object.keys(tarifasPorA√±o[a√±o] || {});
      estadisticasDetalladas.porA√±o[a√±o] = {
        meses: mesesDelA√±o.length,
        archivos: Object.values(tarifasPorA√±o[a√±o] || {}).flat().length,
        mesesDisponibles: mesesDelA√±o
      };
    });

    // Analizar completitud por mes
    const todosMeses = ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio', 
                       'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre'];
    
    todosMeses.forEach(mes => {
      const a√±osConEsteMes = a√±osOrdenados.filter(a√±o => 
        tarifasPorA√±o[a√±o] && tarifasPorA√±o[a√±o][mes]
      );
      estadisticasDetalladas.resumenMeses[mes] = {
        a√±os: a√±osConEsteMes.length,
        porcentaje: Math.round((a√±osConEsteMes.length / a√±osOrdenados.length) * 100)
      };
    });

    return NextResponse.json({
      success: true,
      message: `Encontrados ${a√±osOrdenados.length} a√±os de tarifas (${Math.min(...a√±osEncontrados)}-${Math.max(...a√±osEncontrados)})`,
      a√±os: {
        encontrados: a√±osOrdenados,
        total: a√±osOrdenados.length,
        rango: `${Math.min(...a√±osEncontrados)}-${Math.max(...a√±osEncontrados)}`
      },
      tarifasPorA√±o: tarifasPorA√±o,
      archivosEncontrados: archivosEncontrados,
      estadisticas: estadisticasDetalladas,
      busqueda: {
        paginasBuscadas: page - 1,
        archivosTotales: archivosEncontrados.length,
        fuentesConsultadas: ['media_library', 'posts'],
        timestamp: new Date().toISOString()
      },
      recomendaciones: generarRecomendaciones(a√±osEncontrados, tarifasPorA√±o)
    });

  } catch (error) {
    console.error('‚ùå Error general buscando a√±os:', error);
    return NextResponse.json({
      success: false,
      message: 'Error buscando a√±os de tarifas',
      error: error.message,
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}

// Analizar archivo para extraer a√±o y informaci√≥n
function analizarArchivo(archivo) {
  try {
    const title = archivo.title?.rendered || '';
    const filename = archivo.source_url || '';
    const date = archivo.date || '';
    const size = archivo.media_details?.filesize;
    
    // Buscar patrones m√°s amplios de a√±o (2008-2025)
    const textoCompleto = `${title} ${filename} ${date}`.toLowerCase();
    
    // Patrones de a√±o m√°s flexibles
    const a√±oPatterns = [
      /20(0[8-9]|1[0-9]|2[0-5])/g, // 2008-2025
      /\b(0[8-9]|1[0-9]|2[0-5])\b/g // Solo √∫ltimos dos d√≠gitos
    ];
    
    let a√±o = null;
    for (const pattern of a√±oPatterns) {
      const matches = textoCompleto.match(pattern);
      if (matches) {
        let a√±oEncontrado = matches[0];
        if (a√±oEncontrado.length === 2) {
          a√±oEncontrado = '20' + a√±oEncontrado;
        }
        a√±o = parseInt(a√±oEncontrado);
        if (a√±o >= 2008 && a√±o <= 2025) {
          break;
        }
      }
    }
    
    // Si no encuentra a√±o en el texto, intentar extraer de la fecha del archivo
    if (!a√±o) {
      const fechaArchivo = new Date(date);
      if (!isNaN(fechaArchivo.getTime())) {
        a√±o = fechaArchivo.getFullYear();
      }
    }
    
    // Si a√∫n no hay a√±o, usar a√±o actual como fallback
    if (!a√±o || a√±o < 2008 || a√±o > 2025) {
      a√±o = new Date().getFullYear();
    }

    // Detectar mes
    const mes = detectarMes(textoCompleto);
    
    // Verificar si es relevante para tarifas
    const esRelevante = verificarRelevancia(textoCompleto);
    
    if (!esRelevante) {
      return null;
    }

    return {
      id: `wp-${archivo.id}`,
      nombre: title || `Archivo ${archivo.id}.pdf`,
      tama√±o: size ? formatearTama√±o(size) : 'N/A',
      fecha: date.split('T')[0],
      url: archivo.source_url,
      a√±o: a√±o,
      mes: mes,
      fuente: 'wordpress_media',
      wpId: archivo.id,
      tipo: detectarTipoDocumento(textoCompleto)
    };
    
  } catch (error) {
    console.error('‚ùå Error analizando archivo:', error);
    return null;
  }
}

// Detectar mes del archivo
function detectarMes(texto) {
  const meses = {
    'enero': 'enero', 'ene': 'enero', 'jan': 'enero', '01': 'enero', ' 1 ': 'enero',
    'febrero': 'febrero', 'feb': 'febrero', 'feb': 'febrero', '02': 'febrero', ' 2 ': 'febrero',
    'marzo': 'marzo', 'mar': 'marzo', '03': 'marzo', ' 3 ': 'marzo',
    'abril': 'abril', 'abr': 'abril', 'apr': 'abril', '04': 'abril', ' 4 ': 'abril',
    'mayo': 'mayo', 'may': 'mayo', '05': 'mayo', ' 5 ': 'mayo',
    'junio': 'junio', 'jun': 'junio', '06': 'junio', ' 6 ': 'junio',
    'julio': 'julio', 'jul': 'julio', '07': 'julio', ' 7 ': 'julio',
    'agosto': 'agosto', 'ago': 'agosto', 'aug': 'agosto', '08': 'agosto', ' 8 ': 'agosto',
    'septiembre': 'septiembre', 'sep': 'septiembre', 'sept': 'septiembre', '09': 'septiembre', ' 9 ': 'septiembre',
    'octubre': 'octubre', 'oct': 'octubre', '10': 'octubre',
    'noviembre': 'noviembre', 'nov': 'noviembre', '11': 'noviembre',
    'diciembre': 'diciembre', 'dic': 'diciembre', 'dec': 'diciembre', '12': 'diciembre'
  };
  
  for (const [patron, mesCompleto] of Object.entries(meses)) {
    if (texto.includes(patron)) {
      return mesCompleto;
    }
  }
  
  // Si no encuentra mes espec√≠fico, usar mes actual
  const mesesArray = ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio',
                      'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre'];
  return mesesArray[new Date().getMonth()];
}

// Verificar si el archivo es relevante para tarifas
function verificarRelevancia(texto) {
  const palabrasRelevantes = [
    'tarifa', 'esf', 'estado', 'financiero', 'resultado', 'balance',
    'energia', 'electrica', 'creg', 'regulacion', 'precio', 'costo',
    'facturacion', 'usuario', 'comercial', 'residencial'
  ];
  
  return palabrasRelevantes.some(palabra => texto.includes(palabra));
}

// Detectar tipo de documento
function detectarTipoDocumento(texto) {
  if (texto.includes('tarifa')) return 'tarifa';
  if (texto.includes('esf') || texto.includes('estado financiero')) return 'estado_financiero';
  if (texto.includes('balance')) return 'balance';
  if (texto.includes('resultado')) return 'estado_resultado';
  return 'documento_financiero';
}

// Extraer tarifas de posts
function extraerTarifasDePost(post) {
  const tarifas = [];
  
  try {
    const content = post.content?.rendered || '';
    const title = post.title?.rendered || '';
    const date = post.date || '';
    
    // Buscar enlaces a PDFs
    const pdfMatches = content.match(/href="([^"]*\.pdf[^"]*)"/gi);
    
    if (pdfMatches) {
      pdfMatches.forEach((match, index) => {
        const urlMatch = match.match(/href="([^"]*)"/);
        if (urlMatch) {
          const url = urlMatch[1];
          const info = analizarArchivo({
            id: `post-${post.id}-${index}`,
            title: { rendered: title },
            source_url: url,
            date: date
          });
          
          if (info) {
            tarifas.push({
              ...info,
              fuente: 'wordpress_post',
              postId: post.id
            });
          }
        }
      });
    }
  } catch (error) {
    console.error('‚ùå Error extrayendo tarifas de post:', error);
  }
  
  return tarifas;
}

// Formatear tama√±o
function formatearTama√±o(bytes) {
  if (!bytes) return 'N/A';
  const mb = bytes / (1024 * 1024);
  return `${mb.toFixed(1)} MB`;
}

// Generar recomendaciones
function generarRecomendaciones(a√±os, tarifasPorA√±o) {
  const recomendaciones = [];
  const a√±osArray = Array.from(a√±os).sort((a, b) => a - b);
  
  if (a√±osArray.length > 0) {
    recomendaciones.push({
      tipo: 'SUCCESS',
      mensaje: `Encontrado historial completo desde ${Math.min(...a√±osArray)} hasta ${Math.max(...a√±osArray)}`,
      accion: 'Los datos est√°n listos para usar en el frontend'
    });
  }
  
  // Verificar a√±os faltantes en el rango
  const primerA√±o = Math.min(...a√±osArray);
  const ultimoA√±o = Math.max(...a√±osArray);
  const a√±osFaltantes = [];
  
  for (let a√±o = primerA√±o; a√±o <= ultimoA√±o; a√±o++) {
    if (!a√±os.has(a√±o)) {
      a√±osFaltantes.push(a√±o);
    }
  }
  
  if (a√±osFaltantes.length > 0) {
    recomendaciones.push({
      tipo: 'INFO',
      mensaje: `A√±os con datos incompletos: ${a√±osFaltantes.join(', ')}`,
      accion: 'Considerar subir archivos faltantes a WordPress'
    });
  }
  
  return recomendaciones;
}